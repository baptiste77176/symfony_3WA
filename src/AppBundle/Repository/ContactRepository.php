<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Contact;

/**
 * ContactRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContactRepository extends \Doctrine\ORM\EntityRepository
{

    public function testDelete()
    {
        $result = $this->getEntityManager()->createQueryBuilder()
            ->delete(Contact::class, 'contact')
            ->where('contact.id = :paramId')
            ->setParameters([
                'paramId' => 510
            ])
            ->getQuery()
            ->execute()
        ;

        return $result;
    }




    public function testUpdate()
    {
        /*
         * retour de la requete : nombre de lignes modifiées
         * utilisation de execute() en remplacement de getResult()
         *
         *
         * */
        $result = $this->getEntityManager()->createQueryBuilder()
            ->update(Contact::class, 'contact')
            ->set('contact.firstname',':paramFirstName')
            ->where('contact.id = :paramId')
            ->setParameters([
                'paramFirstName' => 'toto',
                'paramId'=> 510,
            ])

            ->getQuery()
            ->execute()
            ;
        return $result;
    }

    /*
     * requetes personnalisées
     *      le choix de la classe repository équivaut a la commande FROM
     *      doit retourner les resultats de la requete
     *
     * createQueryBuiler : méthode pour créer une requete au format DQL(doctrine query language)
     *
     *      choix d'un alias de l'entité en cours
     *
     * getQuery : executer la requete : avant derniere methode
     * récupérer les resultats : derniere methode a utiliser
     *      - getResult : array d'entité ( a condition quil ny est pas de select
     *      - getArrayResult  : array de array
 *          - getSingleOrNullresult/getSingle : un seul resultat
     *
     * commande sql  :
     *      - select() : utilisation de l'alias (quand utilisation d'un select on retourne un tableau et non une entité)
     *      - where() : condition
     *              - premiere condition doit utiliser where()
     *              - a partir de la deuxieme conditions , utiliser andWhere() ou orWhere()
 *                  - utiliser des parametres de requete / setParameters : permet d'assigner une valeur aux parametres
     *              - join() : jointures
     *                  - cibler les propriété relationelles des entités
     *                  - choix d'un alias de l'entité jointe
 *                  - groupBy()
     *                  - regroupement de resultats par la valeur d'une colonne selectionné
 *                  - having() : condition sur un regroupement
 *                  - orderBy() : ordre ASC / DESC
     *              - setMaxResults() : LIMIT, limitation des resultats
     *              - setFirstResult() : OFFSET, indice de démarrage
     *
     *
     *
     * SELECT c.firstname AS f FROM contact AS c
     *
     * */

    /* SQL natif
        $q = $this->getEntityManager()->getConnection()->query('SELECT * FROM contact');
        $q->execute();
        $r = $q->fetchAll();
        dump($r); exit;*/

    public function testQuery()/*$this represente la classe */
    {

        $results = $this->createQueryBuilder('contact')
            //COUNT
            ->select('contact.email, COUNT(languages.id) AS result')
            ->join('contact.languages','languages')
            ->groupBy('contact.email')

            //GROUPBY
            /*->select("contact.lastname, GROUP_CONCAT(languages.name SEPARATOR '|')AS language, country.name")
            ->join('contact.languages','languages')
            ->join('contact.country', 'country')
            ->groupBy('contact.lastname, country.name')
            ->orderBy('country.name','ASC')
            ->setMaxResults(10)
            ->setFirstResult(100)*/

            //join
           /* ->select('contact.lastname, languages.name, country.name')
            ->join('contact.country','country')
            ->join('contact.languages','languages')
            ->where('country.name LIKE :paramCountryName')
            ->setParameters([
                'paramCountryName'=>'%1%'
            ])*/

            //WHERE
            /*->select('contact.email, contact.firstname')
            ->where('contact.lastname = :paramLastName')
            ->orWhere('contact.email = :paramEmail')
            ->setParameters([
                'paramLastName' => 'lastname2',
                'paramEmail' => 'email6@gmail.com'
            ])*/
            //LIKE
            /*
            ->where('contact.email LIKE :paramLike')
            ->setParameters([
                'paramLike'=> '%1%'
            ])*/
            ->getQuery()
            ->getArrayResult()
        ;

        return $results;
    }

}
